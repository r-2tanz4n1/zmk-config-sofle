/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>



/ {
    keymap {
        compatible = "zmk,keymap";

        BASE {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC       AS(N1)  AS(N2)      AS(N3)          AS(N4)              AS(N5)                                          AS(N6)               AS(N7)    AS(N8)      AS(N9)                       AS(N0)                  AS(MINUS)
&kp TAB       AS(Q)   AS(W)       AS(E)           AS(R)               AS(T)                                           AS(Y)                AS(U)     AS(I)       AS(O)                        AS(P)                   AS(RIGHT_BRACKET)
&kp LEFT_ALT  AS(A)   AS(S)       AS(D)           AS(F)               AS(G)                                           AS(H)                AS(J)     AS(K)       AS(L)                        &mt LEFT_ALT SEMICOLON  AS(SQT)
&kp LSHFT     AS(Z)   AS(X)       AS(C)           AS(V)               AS(B)           &mkp MB3       &mkp MB4         AS(N)                AS(M)     AS(COMMA)   AS(DOT)                      AS(FSLH)                &mt RSHFT ENTER
                      &caps_word  &mt LCTRL LEFT  &mt LEFT_ALT RIGHT  &mt LCMD SPACE  &lt 1 ENTER    &lt 1 BACKSPACE  &mt RIGHT_GUI SPACE  &lt 2 UP  &lt 3 DOWN  &mt LC(LS(LA(RALT))) DELETE
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN_ARROW UP_ARROW>,
                <&inc_dec_kp RIGHT_ARROW LEFT_ARROW>;
        };

        NUM {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp CAPS   &kp F1            &kp F2             &kp F3         &kp F4        &kp F5                           &kp F6        &kp F7        &kp F8     &kp F9   &kp F10        &kp MINUS
&kp TAB    &kp LS(EXCL)      &kp LA(N0)         &kp LA(EQUAL)  &kp LS(STAR)  &kp LS(LPAR)                     &kp LS(AMPS)  &kp N7        &kp N8     &kp N9   &kp LS(PRCNT)  &kp LBKT
&kp LALT   &kp LS(UNDER)     &kp LA(N2)         &kp LA(N3)     &kp LA(N4)    &kp LA(N9)                       &kp LS(PLUS)  &kp N4        &kp N5     &kp N6   &kp EQUAL      &kp BSLH
&kp LSHFT  &kp LS(NUMBER_3)  &kp F2             &kp F4         &none         &kp LS(GRAVE)  &trans    &trans  &kp N0        &kp N1        &kp N2     &kp N3   &kp FSLH       &kp RET
                             &kp LS(LA(LC(Q)))  &kp LCTRL      &kp LALT      &trans         &trans    &trans  &kp TAB       &kp LS(RPAR)  &kp COMMA  &kp DOT
            >;
        };

        NAV {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp ESC    &kp F11  &kp F12   &none      &trans    &trans                                        &kp K_PLAY_PAUSE  &kp K_MUTE        &kp C_VOL_DN  &kp C_VOLUME_UP    &kp LA(BSPC)      &kp RG(BACKSPACE)
&kp TAB    &none    &mkp MB1  &none      &mkp MB2  &none                                         &kp LA(UP)        &kp LS(LA(LEFT))  &kp UP        &kp LS(LA(RIGHT))  &kp RG(W)         &kp BSPC
&kp LALT   &none    &none     &none      &none     &none                                         &kp LS(LA(UP))    &kp LEFT          &kp DOWN      &kp RIGHT          &kp LS(LA(DOWN))  &kp LA(DOWN)
&kp LSHFT  &none    &none     &none      &none     &none           &trans         &trans         &kp LG(B)         &kp RG(H)         &kp LG(C)     &kp LG(V)          &none             &kp RSHFT
                    &trans    &kp LCTRL  &kp LALT  &mt LGUI SPACE  &lt 3 ENTER    &kp BACKSPACE  &kp RGUI          &trans            &trans        &kp MINUS
            >;

            sensor-bindings = <&inc_dec_kp LS(LA(DOWN)) LS(LA(UP))>;
        };

        SHORT-BT {
            bindings = <
&bt BT_CLR      &kp LS(LG(N1))  &kp LS(LG(N2))  &kp LS(LG(NUMBER_3))  &kp LG(N4)     &kp LG(N5)                       &kp LS(LG(N1))  &kp LS(LG(N2))  &kp LG(LS(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))  &none
&kp LS(LC(AT))  &kp LS(LC(N1))  &kp LS(LC(W))   &kp LS(LC(E))         &kp LS(LC(R))  &kp LS(LC(T))                    &kp LS(LC(AT))  &kp LS(LC(N1))  &kp LS(LC(W))         &kp LS(LC(E))         &kp LS(LC(R))         &kp LS(LC(T))
&kp LS(LC(N4))  &kp LS(LC(N3))  &kp LS(LC(S))   &kp LS(LC(D))         &kp LS(LC(F))  &kp LS(LC(G))                    &kp LS(LC(N4))  &kp LS(LC(N3))  &kp LS(LC(S))         &kp LS(LC(D))         &kp LS(LC(F))         &kp LS(LC(G))
&bt BT_SEL 0    &kp LS(LC(N5))  &kp LS(LC(X))   &kp LS(LC(C))         &kp LS(LC(V))  &kp LS(LC(B))  &trans    &trans  &none           &kp LS(LC(N5))  &kp LS(LC(X))         &kp LS(LC(C))         &kp LS(LC(V))         &kp LS(LC(B))
                                &bt BT_SEL 1    &bt BT_SEL 2          &trans         &trans         &trans    &trans  &trans          &trans          &none                 &none
            >;
        };
    };
};
