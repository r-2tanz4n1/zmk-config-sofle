/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mt {
    tapping-term-ms = <140>;
    quick-tap-ms = <110>;
    flavor = "tap-preferred";
};

/ {
    behaviors {
        td_F2: td_F2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_F2";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;

            tapping-term-ms = <150>;
        };

        td_ShftCW: td_ShftCW {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHFTCW";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;

            tapping-term-ms = <160>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            bindings = <&shifted>, <&kp>;

            flavor = "tap-preferred";
        };

        soff: soft_off {
            compatible = "zmk,behavior-soft-off";
            #binding-cells = <0>;

            // split-peripheral-off-on-press;

            hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
        };
    };

    macros {
        shifted: macro_shifted_kp {
            #binding-cells = <1>;
            label = "MACRO_SHIFTED_KP";
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press>,
                <&kp LSHFT &macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LSHFT>;
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            label = "AUTOSHIFT_KP";
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Soft_off_right {
            bindings = <&soff>;
            key-positions = <30 18 44>;
        };

        Soft_off_left {
            bindings = <&soff>;
            key-positions = <41 29 17>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp EQUAL     &as N1  &as N2         &as N3             &as N4    &as N5                                          &as N6          &as N7      &as N8               &as N9                 &as N0                  &as MINUS
&kp TAB       &as Q   &as W          &as E              &as R     &as T                                           &as Y           &as U       &as I                &as O                  &as P                   &as RIGHT_BRACKET
&kp LEFT_ALT  &as A   &as S          &as D              &as F     &as G                                           &as H           &as J       &as K                &as L                  &mt LEFT_ALT SEMICOLON  &as SQT
&td_ShftCW    &as Z   &as X          &as C              &as V     &as B           &none          &none            &as N           &as M       &as COMMA            &as PERIOD             &as SLASH               &mt RSHFT ENTER
                      &mt LCTRL ESC  &mt LEFT_ALT DOWN  &lt 1 UP  &mt LGUI SPACE  &lt 2 ENTER    &lt 1 BACKSPACE  &mt RGUI SPACE  &lt 2 LEFT  &lt 3 RIGHT_COMMAND  &mt RS(RA(RCTRL)) DEL
            >;

            sensor-bindings = <&inc_dec_kp UP DOWN>, <&inc_dec_kp LEFT RIGHT>;
        };

        NUM {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp CAPS   &kp F1         &kp F2      &kp F3                &kp F4        &kp F5                                     &kp F6             &kp F7      &kp F8      &kp F9     &kp F10     &kp DEL
&kp TAB    &kp LA(EQUAL)  &kp LS(N5)  &kp LS(N3)            &kp LS(N8)    &kp LS(N9)                                 &kp LS(N7)         &kp N7      &kp N8      &kp N9     &kp LA(N0)  &kp LBKT
&kp LALT   &none          &kp LA(N2)  &kp LA(N3)            &kp LA(N8)    &kp LA(N9)                                 &kp LS(EQUAL)      &kp N4      &kp N5      &kp N6     &kp EQUAL   &none
&kp LSHFT  &none          &kp F2      &kp NON_US_BACKSLASH  &kp INT1      &kp LS(GRAVE)  &trans       &trans         &kp N0             &kp N1      &kp N2      &kp N3     &kp FSLH    &trans
                          &kp LCTRL   &kp LEFT_ALT          &kp LEFT_GUI  &kp SPACE      &kp ENTER    &kp BACKSPACE  &kp RIGHT_COMMAND  &kp LS(N0)  &kp PERIOD  &kp COMMA
            >;

            sensor-bindings =
                <&inc_dec_kp LA(UP) RA(DOWN)>,
                <&inc_dec_kp LA(LEFT) LA(RIGHT)>;
        };

        NAV {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&caps_word  &kp F11  &kp F12            &kp F13     &kp F14               &kp F15                                 &kp RS(RG(N1))  &kp RS(RG(N2))  &kp RS(RG(N3))    &kp RS(RG(N4))     &kp RS(RG(N5))  &kp DEL
&kp TAB     &kp F16  &kp F17            &kp F18     &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC                    &kp LA(LS(UP))  &kp LA(UP)      &kp LS(LA(DOWN))  &kp LA(DOWN)       &kp LA(TAB)     &kp RG(BACKSPACE)
&kp LALT    &kp F19  &kp F20            &kp K_MUTE  &kp C_VOL_DN          &kp C_VOL_UP                            &kp LEFT        &kp UP          &kp DOWN          &kp RIGHT          &none           &kp LA(DEL)
&kp LSHFT   &none    &none              &kp C_PLAY  &kp C_PREV            &kp C_NEXT            &trans    &trans  &kp LG(T)       &kp RG(W)       &kp LG(C)         &kp LG(V)          &kp RG(Z)       &trans
                     &kp RS(RA(RC(Q)))  &trans      &trans                &trans                &trans    &trans  &trans          &kp RIGHT_GUI   &trans            &kp RA(BACKSPACE)
            >;

            sensor-bindings =
                <&inc_dec_kp LA(LG(UP)) LA(LG(DOWN))>,
                <&inc_dec_kp RA(RG(LEFT)) RA(RG(RIGHT))>;
        };

        SHORT-BT {
            bindings = <
&bt BT_CLR_ALL  &kp LS(LG(N1))  &kp LS(LG(N2))  &kp LS(LG(NUMBER_3))  &kp LG(N4)     &kp LG(N5)                             &none   &kp LS(LC(N1))  &kp LC(LS(N2))  &kp LS(LC(N3))  &kp LS(LC(N4))  &kp LC(LS(N5))
&none           &kp LS(LC(T))   &kp LS(LC(W))   &kp LS(LC(E))         &kp LS(LC(R))  &none                                  &none   &kp LS(LC(T))   &kp LS(LC(W))   &kp LS(LC(E))   &kp LS(LC(R))   &none
&none           &none           &kp LS(LC(S))   &kp LS(LC(D))         &kp LS(LC(F))  &kp LS(LC(G))                          &none   &none           &kp LS(LC(S))   &kp LS(LC(D))   &kp LS(LC(F))   &kp LS(LC(G))
&bt BT_CLR      &kp LS(LC(B))   &kp LS(LC(X))   &kp LS(LC(C))         &kp LS(LC(V))  &none          &trans          &trans  &none   &kp LS(LC(B))   &kp LS(LC(X))   &kp LS(LC(C))   &kp LS(LC(V))   &none
                                &bt BT_SEL 0    &bt BT_SEL 1          &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4    &trans  &trans  &none           &none           &none
            >;
        };
    };
};
