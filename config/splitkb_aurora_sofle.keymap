/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

&mt {
    tapping-term-ms = <140>;
    quick-tap-ms = <1>;
};

/ {
    behaviors {

        td_F2: td_F2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_F2";
            #binding-cells = <0>;
            bindings = <&kp N2>, <&kp F2>;

            tapping-term-ms = <150>;
        };

        td_ShftCW: td_ShftCW {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHFTCW";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;

            tapping-term-ms = <160>;
        };

        as_ht: autoshift_hold_tap {
          compatible = "zmk,behavior-hold-tap";
          label = "AUTOSHIFT_HOLD_TAP";
          #binding-cells = <2>;
          tapping-term-ms = <185>;
          bindings = <&shifted>, <&kp>;
        };
    };

  macros {
    shifted: macro_shifted_kp {
      #binding-cells = <1>;
      label = "MACRO_SHIFTED_KP";
      compatible = "zmk,behavior-macro-one-param";
      bindings =
        <&macro_press &kp LSHFT>,
        <&macro_param_1to1 &macro_tap &kp MACRO_PLACEHOLDER>,
        <&macro_release &kp LSHFT>;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KP";
      bindings =
        <&macro_press>,
        <&macro_param_1to1>,
        <&macro_param_1to2>,
        <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
        <&macro_pause_for_release>,
        <&macro_release>,
        <&macro_param_1to1>,
        <&macro_param_1to2>,
        <&as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;
    };
  };


    keymap {
        compatible = "zmk,keymap";

        BASE {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               |CTRL | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   | RALT |

            bindings = <
&kp ESC       &as N1  &as N2      &as N3          &as N4              &as N5                                          &as N6               &as N7    &as N8      &as N9                       &as N0                  &as MINUS
&mt LCTRL TAB       &as Q   &as W       &as E           &as R               &as T                                           &as Y                &as U     &as I       &as O                        &as P                   &as RIGHT_BRACKET
&kp LEFT_ALT  &as A   &as S       &as D           &as F               &as G                                           &as H                &as J     &as K       &as L                        &mt LEFT_ALT SEMICOLON  &as SQT
&td_ShftCW    &as Z   &as X       &as C           &as V               &as B           &mkp MB3       &mkp MB4         &as N                &as M     &as COMMA   &as DOT                      &as FSLH                &mt RSHFT ENTER
                       &mt LS(LC(LEFT_ALT)) EQUAL  &mt LEFT_ALT LEFT  &lt 2 RIGHT  &mt LCMD SPACE  &lt 1 ENTER    &lt 1 BACKSPACE  &mt RIGHT_GUI SPACE  &lt 2 UP  &lt 3 DOWN     &mt RS(RA(RCTRL)) DELETE
            >;

            sensor-bindings =
                <&inc_dec_kp UP DOWN>,
                <&inc_dec_kp LEFT_ARROW RIGHT_ARROW>;
        };

        NUM {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&kp CAPS   &kp F1            &kp F2      &kp F3         &kp F4        &kp F5                           &kp F6        &kp F7        &kp F8     &kp F9   &kp F10        &kp MINUS
&kp TAB    &kp LS(EXCL)      &kp LA(N0)  &kp LA(EQUAL)  &kp LS(STAR)  &kp LS(LPAR)                     &kp LS(AMPS)  &kp N7        &kp N8     &kp N9   &kp LS(PRCNT)  &kp LBKT
&kp LALT   &kp LS(UNDER)     &kp LA(N2)  &kp LA(N3)     &kp LA(N8)    &kp LA(N9)                       &kp LS(PLUS)  &kp N4        &kp N5     &kp N6   &kp EQUAL      &kp BSLH
&kp LSHFT  &kp LS(NUMBER_3)  &kp F2      &kp F4         &kp INT1      &kp LS(GRAVE)  &trans    &trans  &kp N0        &kp N1        &kp N2     &kp N3   &kp FSLH       &trans
                             &kp LCTRL   &trans         &trans        &trans         &trans    &trans  &kp TAB       &kp LS(RPAR)  &kp COMMA  &kp DOT
            >;

            sensor-bindings =
                <&inc_dec_kp LA(UP) RA(DOWN)>,
                <&inc_dec_kp LA(LEFT) LA(RIGHT)>;
        };

        NAV {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //               |     |      |      |      |        |  |       |      |       |       |      |

            bindings = <
&caps_word  &kp F11  &kp F12    &none     &kp K_PREV  &kp K_NEXT                                    &kp K_PLAY_PAUSE  &kp K_MUTE        &kp C_VOL_DN  &kp C_VOLUME_UP    &kp LA(BSPC)      &kp RG(BACKSPACE)
&kp TAB     &none    &mkp MB1   &none     &mkp MB2    &none                                         &kp LA(UP)        &kp LS(LA(LEFT))  &kp UP        &kp LS(LA(RIGHT))  &kp RG(W)         &kp BSPC
&kp LALT    &none    &none      &none     &none       &none                                         &kp LS(LA(UP))    &kp LEFT          &kp DOWN      &kp RIGHT          &kp LS(LA(DOWN))  &kp LA(DOWN)
&kp LSHFT   &none    &none      &mkp MB3  &none       &none           &trans         &trans         &kp LG(B)         &kp RG(H)         &kp LG(C)     &kp LG(V)          &none             &trans
                     &kp LCTRL  &trans    &trans      &mt LGUI SPACE  &lt 3 ENTER    &kp BACKSPACE  &kp RGUI          &trans            &trans        &kp MINUS
            >;

            sensor-bindings =
                <&inc_dec_kp LS(LA(UP)) LS(LA(DOWN))>,
                <&inc_dec_kp RS(RA(LEFT)) RS(RA(RIGHT))>;
        };

        SHORT-BT {
            bindings = <
&bt BT_CLR_ALL  &kp LS(LG(N1))  &kp LS(LG(N2))  &kp LS(LG(NUMBER_3))  &kp LG(N4)     &kp LG(N5)                       &kp LS(LG(N1))  &kp LS(LG(N2))  &kp LG(LS(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))  &none
&kp LS(LC(AT))  &kp LS(LC(N1))  &kp LS(LC(W))   &kp LS(LC(E))         &kp LS(LC(R))  &kp LS(LC(T))                    &kp LS(LC(AT))  &kp LS(LC(N1))  &kp LS(LC(W))         &kp LS(LC(E))         &kp LS(LC(R))         &kp LS(LC(T))
&kp LS(LC(N4))  &kp LS(LC(N3))  &kp LS(LC(S))   &kp LS(LC(D))         &kp LS(LC(F))  &kp LS(LC(G))                    &kp LS(LC(N4))  &kp LS(LC(N3))  &kp LS(LC(S))         &kp LS(LC(D))         &kp LS(LC(F))         &kp LS(LC(G))
&bt BT_CLR      &kp LS(LC(N5))  &kp LS(LC(X))   &kp LS(LC(C))         &kp LS(LC(V))  &kp LS(LC(B))  &trans    &trans  &none           &kp LS(LC(N5))  &kp LS(LC(X))         &kp LS(LC(C))         &kp LS(LC(V))         &kp LS(LC(B))
                                &bt BT_SEL 0    &bt BT_SEL 1          &trans         &trans         &trans    &trans  &trans          &trans          &bt BT_SEL 2          &bt BT_SEL 3
            >;
        };
    };
};
